[{"D:\\reactproject1\\src\\reportWebVitals.js":"1","D:\\reactproject1\\src\\App.js":"2","D:\\reactproject1\\src\\components\\Todo.jsx":"3","D:\\reactproject1\\src\\index.js":"4","D:\\reactproject1\\src\\components\\Form.jsx":"5","D:\\reactproject1\\src\\components\\FilterButton.jsx":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3706,"mtime":1607021621759,"results":"9","hashOfConfig":"8"},{"size":3056,"mtime":1607071218424,"results":"10","hashOfConfig":"8"},{"size":743,"mtime":1607021967278,"results":"11","hashOfConfig":"8"},{"size":1411,"mtime":1607020555214,"results":"12","hashOfConfig":"8"},{"size":679,"mtime":1607021810559,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ogeool",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"D:\\reactproject1\\src\\reportWebVitals.js",[],["29","30"],"D:\\reactproject1\\src\\App.js",["31"],"// import logo from './logo.svg';\n// import './App.css';\nimport { nanoid } from \"nanoid\";\nimport React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nconst FILTER_MAP = {\n  // The All filter shows all tasks, so we return true for all tasks.\n  All: () => true,\n  // The Active filter shows tasks whose completed prop is false.\n  Active: task => !task.completed,\n  // The Completed filter shows tasks whose completed prop is true.\n  Completed: task => task.completed\n};\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  // here we are using the Object.keys() method to collect an array of FILTER_NAMES:\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  // filterList, which we will use to map over our array of names and return a <FilterButton /> component\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name} \n      name={name} \n      isPressed={name === filter} \n      setFilter={setFilter}/>\n  ));\n\n  function editTask(id, newName , newDesc) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName, desc: newDesc }\n      } \n      return task;\n      \n  });\n  // const editedTaskList1 = tasks.map(task => {\n  //     // if this task has the same ID as the edited task\n  //       if (id === task.id) {\n  //         //\n  //         return {...task, desc: newDesc}\n  //       } \n  //       return task;\n  // });  \n  // setTasks(editedTaskList1); \n  setTasks(editedTaskList);\n    \n}\n\n\n  // The deleteTask callback prop\n  function deleteTask(id) {\n    // console.log(id)\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    // setTasks() expects an array as an argument,\n    setTasks(remainingTasks);\n  }\n  // toggleTaskCompleted(), this function will take an id parameter,\n  function toggleTaskCompleted(id) {\n    // console.log(tasks[0])\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      desc={task.desc}\n      completed={task.completed}\n      key={task.id}\n      // we'll add toggleTaskCompleted to the props of each <Todo/> component rendered inside our taskList;\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n      // editTask1={editTask1}\n    />\n  ));\n\n    function addTask(name,desc) {\n      // console.log(name,desc);\n      const newTask = { id: \"todo-\" + nanoid(), name: name, desc: desc, completed: false };\n      setTasks([...tasks, newTask]);\n    }\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return (\n    <div className=\"App\">\n      <div className=\"todoapp stack-large\">\n      <h1>Todo List</h1>\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n      </div>\n      <h4 id=\"list-heading\">{headingText}</h4>\n      <ul role=\"list\" className=\"todo-list stack-large stack-exception\" aria-labelledby=\"list-heading\">\n        {taskList}\n      </ul>\n      \n    </div>\n    </div>\n  );\n}\n\nexport default App;\n",["32","33"],"D:\\reactproject1\\src\\components\\Todo.jsx",[],"D:\\reactproject1\\src\\index.js",[],"D:\\reactproject1\\src\\components\\Form.jsx",[],"D:\\reactproject1\\src\\components\\FilterButton.jsx",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":114,"column":7,"nodeType":"40","endLine":114,"endColumn":104},{"ruleId":"34","replacedBy":"41"},{"ruleId":"36","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement",["43"],["44"],"no-global-assign","no-unsafe-negation"]