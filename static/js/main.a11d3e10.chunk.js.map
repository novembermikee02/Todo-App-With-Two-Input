{"version":3,"sources":["components/Form.jsx","components/FilterButton.jsx","components/Todo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","name","setName","desc","setDesc","onSubmit","e","preventDefault","addTask","className","htmlFor","type","id","placeholder","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","isEditing","setEditing","newName","setNewName","newDesc","setNewDesc","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","class","deleteTask","FILTER_MAP","All","Active","task","Completed","App","tasks","setTasks","filter","filterList","Object","keys","map","editedTaskList","remainingTasks","updatedTasks","taskList","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a11d3e10.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n\r\n  const [name, setName] = useState('');\r\n  const [desc, setDesc] = useState('');\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    // alert('Hello, world!');\r\n    props.addTask(name, desc);\r\n    setName(\"\");\r\n    setDesc(\"\");\r\n\r\n  }\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n    // setDesc(e.target.value);\r\n  }\r\n  function handleChange1(e) {\r\n    // setName(e.target.value);\r\n    setDesc(e.target.value);\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className=\"label-wrapper\">\r\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n          What needs to be done?\r\n          </label>\r\n      </h2>\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg titlestyle\"\r\n        name=\"text\"\r\n        placeholder=\"Title\"\r\n        autoComplete=\"off\"\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        id=\"new-todo-input\"\r\n        className=\"input input__lg descStyle\"\r\n        name=\"text\"\r\n        placeholder=\"Description\"\r\n        autoComplete=\"off\"\r\n        value={desc}\r\n        onChange={handleChange1}\r\n      /> \r\n      <button type=\"submit\" className=\"btn btn__primary btn__lg btnStyle\">\r\n        Add\r\n        </button><br/><br/>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    // <button type=\"button\" className=\"btn toggle-btn\" aria-pressed=\"true\">\r\n    //   <span className=\"visually-hidden\">Show </span>\r\n    //   <span>all </span>\r\n    //   <span className=\"visually-hidden\"> tasks</span>\r\n    // </button>\r\n    \r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;","import React, { useState } from \"react\";\r\n\r\nfunction Todo(props) {\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n    const [newDesc, setNewDesc] = useState('');\r\n\r\n    function handleChange(e) {\r\n        setNewName(e.target.value);\r\n    }\r\n    function handleChange1(e) {\r\n        setNewDesc(e.target.value);\r\n    }\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.editTask(props.id, newName, newDesc);\r\n        // props.editTask1(props.id, newDesc);\r\n        // setNewName(\"\");\r\n        // setNewDesc(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n                <label className=\"todo-label\" htmlFor={props.id}>New name for</label>\r\n                <input id={props.id} className=\"todo-text\" type=\"text\" value={newName} onChange={handleChange} />\r\n\r\n                <label className=\"todo-label\" htmlFor={props.id}>New Description For</label>\r\n                <textarea id={props.id} className=\"todo-text textAreaSize\" type=\"text\" value={newDesc} onChange={handleChange1} />\r\n            </div>\r\n            <div className=\"btn-group\">\r\n                <button type=\"button\" className=\"btn CancleStyle\" onClick={() => setEditing(false)}>\r\n                    Cancel<span className=\"visually-hidden\">renaming {props.name}</span>\r\n                </button>\r\n                <button type=\"submit\" className=\"btn CancleStyle\">\r\n                    Save<span className=\"visually-hidden\">new name for {props.name}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n    const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n            <div className=\"c-cb\">\r\n                <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\r\n                <label className=\"todo-label\" htmlFor={props.id}><b class=\"titlebold\">{props.name}</b></label>\r\n\r\n                <br/> <input id={props.id} type=\"checkbox\" defaultChecked={props.completed} onChange={() => props.toggleTaskCompleted(props.id)} />\r\n                <label className=\"todo-label TextOver\" htmlFor={props.id}>{props.desc}</label>\r\n            </div>\r\n            <div className=\"btn-group EditBtnSize\">\r\n                <button type=\"button\" className=\"btn EditBtn\" onClick={() => setEditing(true)}>\r\n                    Edit <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n                <button type=\"button\" className=\"btn EditBtn\" onClick={() => props.deleteTask(props.id)}>\r\n                    Delete <span className=\"visually-hidden\">{props.name}</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>\r\n            {/* ternary operator. */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","// import logo from './logo.svg';\n// import './App.css';\nimport { nanoid } from \"nanoid\";\nimport React, { useState } from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nconst FILTER_MAP = {\n  // The All filter shows all tasks, so we return true for all tasks.\n  All: () => true,\n  // The Active filter shows tasks whose completed prop is false.\n  Active: task => !task.completed,\n  // The Completed filter shows tasks whose completed prop is true.\n  Completed: task => task.completed\n};\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  // here we are using the Object.keys() method to collect an array of FILTER_NAMES:\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  // filterList, which we will use to map over our array of names and return a <FilterButton /> component\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name} \n      name={name} \n      isPressed={name === filter} \n      setFilter={setFilter}/>\n  ));\n\n  function editTask(id, newName , newDesc) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName, desc: newDesc }\n      } \n      return task;\n      \n  });\n  // const editedTaskList1 = tasks.map(task => {\n  //     // if this task has the same ID as the edited task\n  //       if (id === task.id) {\n  //         //\n  //         return {...task, desc: newDesc}\n  //       } \n  //       return task;\n  // });  \n  // setTasks(editedTaskList1); \n  setTasks(editedTaskList);\n    \n}\n\n\n  // The deleteTask callback prop\n  function deleteTask(id) {\n    // console.log(id)\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    // setTasks() expects an array as an argument,\n    setTasks(remainingTasks);\n  }\n  // toggleTaskCompleted(), this function will take an id parameter,\n  function toggleTaskCompleted(id) {\n    // console.log(tasks[0])\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      desc={task.desc}\n      completed={task.completed}\n      key={task.id}\n      // we'll add toggleTaskCompleted to the props of each <Todo/> component rendered inside our taskList;\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n      // editTask1={editTask1}\n    />\n  ));\n\n    function addTask(name,desc) {\n      // console.log(name,desc);\n      const newTask = { id: \"todo-\" + nanoid(), name: name, desc: desc, completed: false };\n      setTasks([...tasks, newTask]);\n    }\n\n    const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n    const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return (\n    <div className=\"App\">\n      <div className=\"todoapp stack-large\">\n      <h1>Todo List</h1>\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n      </div>\n      <h4 id=\"list-heading\">{headingText}</h4>\n      <ul role=\"list\" className=\"todo-list stack-large stack-exception\" aria-labelledby=\"list-heading\">\n        {taskList}\n      </ul>\n      \n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  // { id: \"todo-0\", name: \"Eat\", desc:\"Eating\", completed: true },\n  // { id: \"todo-1\", name: \"Sleep\", desc:\"Sleping\", completed: false },\n  // { id: \"todo-2\", name: \"Repeat\", desc:\"Repeat\", completed: false }\n];\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}